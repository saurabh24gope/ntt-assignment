package com.ntt.match_service.service;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;

import com.ntt.match_service.entity.Match;
import com.ntt.match_service.repo.MatchRepository;

@Serprivate final MatchService matchService;

@Autowired
public MatchController(MatchService matchService) {
    this.matchService = matchService;
}

@GetMapping
public List<Match> getAllMatches() {
    return matchService.getAllMatches();
}

@GetMapping("/{id}")
public ResponseEntity<Match> getMatchById(@PathVariable Long id) {
    return matchService.getMatchById(id);
}

@PostMapping
public Match createMatch(@RequestBody Match match) {
    return matchService.createMatch(match);
}

@PutMapping("/{id}")
public ResponseEntity<Match> updateMatchDetails(@PathVariable Long id, @RequestBody Match matchDetails) {
    return matchService.updateMatchDetails(id, matchDetails);
}

@DeleteMapping("/{id}")
public ResponseEntity<Void> deleteMatch(@PathVariable Long id) {
    return matchService.deleteMatch(id);
}
public class MatchService {
	
	private final MatchRepository matchRepository;

   
    public MatchService(MatchRepository matchRepository) {
        this.matchRepository = matchRepository;
    }

    // Get all matches
    public List<Match> getAllMatches() {
        return matchRepository.findAll();
    }

    // Get match by ID
    public ResponseEntity<Match> getMatchById(Long id) {
        Optional<Match> match = matchRepository.findById(id);
        return match.map(ResponseEntity::ok)
                    .orElse(ResponseEntity.notFound().build());
    }

    // Create a new match
    public Match createMatch(Match match) {
        return matchRepository.save(match);
    }

    // Update match details
    public ResponseEntity<Match> updateMatchDetails(Long id, Match matchDetails) {
        Optional<Match> existingMatch = matchRepository.findById(id);
        if (existingMatch.isPresent()) {
            Match match = existingMatch.get();
            match.setTeam1(matchDetails.getTeam1());
            match.setTeam2(matchDetails.getTeam2());
            match.setScore(matchDetails.getScore());
            match.setStatus(matchDetails.getStatus());
            return ResponseEntity.ok(matchRepository.save(match));
        }
        return ResponseEntity.notFound().build();
    }

    // Delete match by ID
    public ResponseEntity<Void> deleteMatch(Long id) {
        if (matchRepository.existsById(id)) {
            matchRepository.deleteById(id);
            return ResponseEntity.ok().build();
        }
        return ResponseEntity.notFound().build();
    }

}
